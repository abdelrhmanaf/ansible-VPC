- hosts: localhost
  gather_facts: False

  tasks:
    - name: Import VPC Var
      include_vars: Variables/vpc_setup

    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{vpc_name}}"
        cidr_block: "{{vpcCidr}}"
        region: "{{region}}"
        state: "{{state}}"
        dns_support: yes
        dns_hostnames: yes
        tenancy: default
      register: vpcout
      
    - debug: 
          var: vpcout

    - name: Create subnet 1 in zone 1
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        cidr: "{{PublicSub1cidr}}"
        region: "{{region}}"
        az: "{{zone1}}"
        state: "{{state}}"
        map_public: true
        tags:
          Name: PubSub1 
      register: pubsub1_out

    - name: Create subnet 2 in zone 2
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        cidr: "{{PublicSub2cidr}}"
        region: "{{region}}"
        az: "{{zone2}}"
        state: "{{state}}"
        map_public: true
        tags:
          Name: PubSub2 
      register: pubsub2_out

    - name: Create subnet 3 in zone 3
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        cidr: "{{PublicSub3cidr}}"
        region: "{{region}}"
        az: "{{zone3}}"
        state: "{{state}}"
        map_public: true
        tags:
          Name: PubSub3 
      register: pubsub3_out

    - name: Create subnet 4 in zone 1
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        cidr: "{{PrivSub1cidr}}"
        region: "{{region}}"
        az: "{{zone1}}"
        state: "{{state}}"
        map_public: true
        tags:
          Name: PrivSub1 
      register: privsub1_out

    - name: Create subnet 5 in zone 2
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        cidr: "{{PrivSub2cidr}}"
        region: "{{region}}"
        az: "{{zone2}}"
        state: "{{state}}"
        map_public: true
        tags:
          Name: PrivSub2 
      register: privsub2_out

    - name: Create subnet 6 in zone 3
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        cidr: "{{PrivSub3cidr}}"
        region: "{{region}}"
        az: "{{zone3}}"
        state: "{{state}}"
        map_public: true
        tags:
          Name: PrivSub3 
      register: privsub3_out

    - name: Create Internet gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        state: "{{state}}"
        tags:
          Tag1: IGW
      register: igw_out

    - name: Set up public subnet route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        tags:
          Name: Public
        subnets:
          - "{{ pubsub1_out.subnet.id }}"
          - "{{ pubsub2_out.subnet.id }}"
          - "{{ pubsub3_out.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw_out.gateway_id }}"
      register: publicRT_out

    - name: Create new nat gateway and allocate new EIP if a nat gateway does not yet exist in the subnet
      amazon.aws.ec2_vpc_nat_gateway:
        state: "{{state}}"
        subnet_id: "{{ pubsub1_out.subnet.id }}"
        wait: true
        region: "{{region}}"
        if_exist_do_not_create: true
      register: NATGW_out


    - name: Set up public subnet route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        tags:
          Name: Private
        subnets:
          - "{{ privsub1_out.subnet.id }}"
          - "{{ privsub2_out.subnet.id }}"
          - "{{ privsub3_out.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw_out.gateway_id }}"
      register: privRT_out

    - debug:
        var: "{{item}}"
      loop:
        - vpcout.vpc.id
        - pubsub1_out.subnet.id
        - pubsub2_out.subnet.id
        - pubsub3_out.subnet.id
        - privsub1_out.subnet.id
        - privsub2_out.subnet.id
        - privsub3_out.subnet.id
        - igw_out.gateway_id
        - publicRT_out.route_table.id
        - NATGW_out.nat_gateway_id
        - privRT_out.route_table.id

      - set_fact:
         vpcid: "{{vpcout.vpc.id}}"
         pubsub1id: "{{ pubsub1_out.subnet.id }}"
         pubsub2id: "{{ pubsub2_out.subnet.id }}"
         pubsub3id: "{{ pubsub3_out.subnet.id }}"
         privsub1id: "{{ privsub1_out.subnet.id }}"
         privsub2id: "{{ privsub2_out.subnet.id }}"
         privsub3id: "{{ privsub3_out.subnet.id }}"
         igwid: "{{ igw_out.gateway_id }}"
         pubRTid: "{{ publicRT_out.route_table.id }}"
         NATGWid: "{{ NATGW_out.nat_gateway_id }}"
         privRTid: "{{ privRT_out.route_table.id }}"
         cacheable: yes

         - name: copy variables to file
           copy:
            content: "vpcid: {{ vpcout.vpc.id }}\npubsub1id: {{ pubsub1_out.subnet.id }}\npubsub2id: {{ pubsub2_out.subnet.id }}\npubsub3id: {{ pubsub3_out.subnet.id }}\nprivsub1id: {{ privsub1_out.subnet.id }}\nprivsub2id: {{ privsub2_out.subnet.id }}\nprivsub3id: {{ privsub3_out.subnet.id }}\nigwid: {{ igw_out.gateway_id }}\npubRTid: {{ publicRT_out.route_table.id }}\nNATGWid: {{ NATGW_out.nat_gateway_id }}\nprivRTid: {{ privRT_out.route_table.id }}\n"
            dest: Variables/output_vars